@page "/allSwitchRequests"
@using DTOs.ShiftSwitching
@using Microsoft.AspNetCore.Components.Authorization
@using QuickShiftUI.Services
@rendermode InteractiveServer
@inject IShiftSwitchRequestService RequestService
@inject IShiftService ShiftService
@inject NavigationManager Navigation
@using System.Security.Claims
@using DTOs.Shift
@inject AuthenticationStateProvider AuthProvider

<div class="my-shifts-container">
    <h3>All Requests</h3>

    <AuthorizeView>
        <NotAuthorized>
            <p>Please log in to view requests</p>
        </NotAuthorized>
        @* TODO display only requests within the timeframe *@

        <Authorized Context="authorizedUser">
            <p class="mt-4">
                <button @onclick="RedirectToCreateRequest">Create Request</button>
            </p>            
            <p class="mt-4">
                <button @onclick="RedirectToMyRequests">My Requests</button>
            </p>
            @if (requests == null)
            {
            <p class="mt-4">
                <em>Loading...</em>
            </p>
            }
            else if (!requests.Any())
            {
            <p class="mt-4">No requests available.</p>
            }
            else
            {
            <ul class="list-group mt-4">
                @foreach (var requestDto in requests)
                {
                <li class="list-group-item">
                    <a href="#" @onclick="() => RedirectToRequest(requestDto.Id)" @onclick:preventDefault="true">@GetShiftTypeByRequest(requestDto)</a>
                </li>
                }
            </ul>
            }
        </Authorized>
    </AuthorizeView>
</div>

@code {
    private List<ShiftSwitchRequestDTO> requests;

    private Dictionary<ShiftSwitchRequestDTO, ShiftDTO> shiftsInRequests { get; set; }

    private void RedirectToRequest(long Id)
    {
        Navigation.NavigateTo($"/MySwitchRequests/{Id}");
    }
    
    private void RedirectToCreateRequest()
    {
        Navigation.NavigateTo($"/CreateSwitchRequest");
    }
    
    private void RedirectToMyRequests()
    {
        Navigation.NavigateTo($"/MyRequests");
    }

    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    private int loggedInUserId;

    protected override async Task OnInitializedAsync()
    {
        
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst(c => c.Type == "EmployeeId")?.Value;
            if (int.TryParse(userIdClaim, out int userId))
            {
                loggedInUserId = userId;
                requests = (await RequestService.GetAllShiftSwitchRequestsAsync()).ToList();
                shiftsInRequests = new Dictionary<ShiftSwitchRequestDTO, ShiftDTO>();
                foreach (var shiftSwitchRequestDto in requests)
                {
                    shiftsInRequests.Add(shiftSwitchRequestDto, await ShiftService.GetShiftByIdAsync(shiftSwitchRequestDto.OriginShiftId));
                }
                StateHasChanged();
            }
        }
    }

    private string GetShiftTypeByRequest(ShiftSwitchRequestDTO dto)
    {
        shiftsInRequests.TryGetValue(dto, out var retrievedShift);
        if (retrievedShift == null)
        {
            throw new Exception("Failed to retrieve shift");
        }

        return retrievedShift.TypeOfShift;
    }
}