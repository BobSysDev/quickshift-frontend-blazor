@page "/SwitchRequest/{Id:long}"
@using DTOs
@using DTOs.Shift
@using DTOs.ShiftSwitching
@using QuickShiftUI.Services
@inject IShiftService ShiftService
@inject IShiftSwitchRequestService RequestService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider

<h3>Switch Request</h3>

<h4 class="mt-4">Shift to receive</h4>

@* Request shift details *@
@if (shift != null)
{
    <div class="card mt-4">
        <div class="card-header">
            <h4>@shift.TypeOfShift</h4>
        </div>

        <div class="card-body">
            <p><b>Employee assigned: </b><span>@shift.AssignedEmployees</span></p>
            <p>
                <b>Start time: </b><span>@shift.StartDateTime</span>
                <br/>
                <b>End time: </b><span>@shift.EndDateTime</span>
            </p>

            <p>
                <b>Location: </b> <span>@shift.Location</span>
            </p>

            <p>
                <b>Shift description:</b>
                <br>
                <span>@shift.Description</span>
            </p>
        </div>
    </div>
}

<h4>Switch details</h4>
<div>
    <p>@request.Details</p>
</div>

<h4 class="mt-4">Choose shift</h4>

@* Select shift for switch *@

<div>
    @if (myShifts == null)
    {
        <p class="mt-4">
            <em>Loading...</em>
        </p>
    }
    else if (!myShifts.Any())
    {
        <p class="mt-4">No shifts available.</p>
    }
    else if (shift.StartDateTime>=timeFrame.StartDate && shift.EndDateTime<=timeFrame.EndDate) 
    {
        <InputSelect @bind-Value=newReply.TargetShiftId class="list-group mt-4">
            @foreach (var ShiftDTO in myShifts)
            {
                <option value="@ShiftDTO.Id">@ShiftDTO.TypeOfShift</option>
            }
        </InputSelect>
    }
    else
    {
        <p class="mt-4">No shifts available within the timeframe of the request.</p>
    }
</div>

@* Confirm *@
<div class="mt-4">
    <button>Confrim</button>
    <button>Reject</button>
</div>


@code {
    [Parameter] public long Id { get; set; }
    public ShiftSwitchRequestDTO? request { get; set; }
    public NewShiftSwitchReplyDTO newReply { get; set; }
    public ShiftDTO? shift { get; set; }
    public ShiftSwitchRequestTimeframeDTO timeFrame { get; set; }
    private List<ShiftDTO> myShifts;

    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    private int loggedInUserId;

    private void RedirectToShift(long Id)
    {
        Console.WriteLine(Id);
        Navigation.NavigateTo($"/MyShifts/{Id}");
    }
    
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            request = await RequestService.GetShiftSwitchRequestByIdAsync(Id);
        }
        catch
        {
            Navigation.NavigateTo("/AllRequests");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst(c => c.Type == "EmployeeId")?.Value;
            if (int.TryParse(userIdClaim, out int userId))
            {
                loggedInUserId = userId;
                myShifts = (await ShiftService.GetAllShiftsByUserIdAsync(userId)).ToList();
                StateHasChanged();
            }
        }
    }

}