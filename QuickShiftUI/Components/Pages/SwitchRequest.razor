@page "/MySwitchRequests/{Id:long}"
@using DTOs
@using DTOs.Shift
@using DTOs.ShiftSwitching
@using QuickShiftUI.Services
@inject IShiftSwitchRequestService RequestService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider

<h3>Switch Request</h3>

<AuthorizeView>
    <NotAuthorized> </NotAuthorized>

    <Authorized>

        @if (request != null)
        {
            <div class="card mt-4">
                <div class="card-header">
                    <h4>Request ID: @request.Id</h4>
                </div>

                <div class="card-body">
                    <p>
                        <b>Origin Employee ID:</b> <span>@request.OriginEmployeeId</span>
                    </p>
                    <p>
                        <b>Origin Shift ID:</b> <span>@request.OriginShiftId</span>
                    </p>

                    <p>
                        <b>Details:</b>
                        <br />
                        <span>@request.Details</span>
                    </p>

                    @if (request.TimeframeDtos != null && request.TimeframeDtos.Any())
                    {
                        <p>
                            <b>Timeframes:</b>
                            <ul>
                                @foreach (var timeframe in request.TimeframeDtos)
                                {
                                    <li>
                                        From @timeframe.StartDate.ToString("g") to @timeframe.EndDate.ToString("g")
                                    </li>
                                }
                            </ul>
                        </p>
                    }

                    @if (request.ReplyDtos != null && request.ReplyDtos.Any())
                    {
                        <p>
                            <b>Replies:</b>
                            <ul>
                                @foreach (var reply in request.ReplyDtos)
                        {
                        <li class="list-group-item">
                            <a href="#" @onclick="() => RedirectToReply(reply.Id)" @onclick:preventDefault="true">@reply.Details</a></li>
                        }
                            </ul>
                        </p>
                    }
                    else
                    {
                        <p>No replies yet.</p>
                    }
                </div>

                <div class="card-footer">

                    @if (request.OriginEmployeeId != loggedInUserId)
                    {
                        <div class="row">
                        <button class="btn btn-primary col-md mb-4 mb-md-0" @onclick="GoToCreateReply">Create Reply</button>
                        <button class="btn btn-secondary col-md" @onclick="GoBack">Back to All Requests</button>
                        </div>
                    }
                    else
                    {
                        <p class="text-danger mb-4">You cannot create a reply for your own request.</p>
                        <button class="btn btn-secondary" @onclick="GoBack">Back to All Requests</button>
                    }                    
                    
                    

                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    [Parameter] public long Id { get; set; }
    private ShiftSwitchRequestDTO? request;

    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    private int loggedInUserId;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            request = await RequestService.GetShiftSwitchRequestByIdAsync(Id);
        }
        catch
        {
            Navigation.NavigateTo("/allSwitchRequests");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthProvider.GetAuthenticationStateAsync()).User;
        if (!user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/allSwitchRequests");
        }

        var userIdClaim = user.FindFirst(c => c.Type == "EmployeeId")?.Value;
        if (int.TryParse(userIdClaim, out int userId))
        {
            loggedInUserId = userId;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/allSwitchRequests");
    }

    private void GoToCreateReply()
    {
        Navigation.NavigateTo($"/CreateSwitchReply/{Id}");
    }
    
    private void RedirectToReply(long Id)
    {
        Console.WriteLine(Id);
        Navigation.NavigateTo($"/SwitchReply/{Id}");
    }
}
