@page "/AllEmployees"
@using DTOs
@using Microsoft.AspNetCore.Components.Authorization
@inject IEmployeeService EmployeeService
@inject NavigationManager Navigation
@using System.Security.Claims
@using QuickShiftUI.Services
@inject AuthenticationStateProvider AuthProvider

<div class="my-shifts-container">
    <h3>Employee Information</h3>

    <AuthorizeView>
        <NotAuthorized>
            <p>You must be logged in to view this page.</p>
        </NotAuthorized>

        <Authorized Context="authorizedUser">
            @if (employees == null)
            {
                <p class="mt-4">
                    <em>Loading...</em>
                </p>
            }
            else if (!employees.Any())
            {
                <p class="mt-4">No employees available.</p>
            }
            else
            {
                <div class="form-group mt-4">
                    @foreach (var employee in employees)
                    {
                        <div class="form-control mb-3">
                            @employee.FirstName @employee.LastName (@employee.WorkingNumber)
                        </div>
                    }
                </div>
                <button class="btn btn-primary" @onclick="GoBack">Go Back</button>
            }
        </Authorized>
    </AuthorizeView>
</div>

@code {
    private List<EmployeeDTO> employees;

    [CascadingParameter] public Task<AuthenticationState> State { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            employees = await EmployeeService.GetAllEmployeesAsync();

            employees.Sort((dto1, dto2) =>
            {
                if (dto1.WorkingNumber > dto2.WorkingNumber)
                {
                    return 1;
                }

                if (dto1.WorkingNumber == dto2.WorkingNumber)
                {
                    return 0;
                }

                return -1;
            });
        }

        StateHasChanged();
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

}