@page "/CreateAccount"
@using DTOs
@using QuickShiftUI.Components.Auth
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager navMgr

<div class="create-account-container">
    <h2>Create Account</h2>

    <EditForm Model="newEmployee" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="first-name">First Name:</label>
            <InputText id="first-name" class="form-control" @bind-Value="newEmployee.FirstName" />
        </div>

        <div class="form-group">
            <label for="last-name">Last Name:</label>
            <InputText id="last-name" class="form-control" @bind-Value="newEmployee.LastName" />
        </div>

        <div class="form-group">
            <label for="working-number">Working Number:</label>
            <InputText id="working-number" class="form-control" @bind-Value="workingNumberStr" />
        </div>

        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" class="form-control" @bind-Value="newEmployee.Email" />
        </div>

        <div class="form-group">
            <label for="password">Password:</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="newEmployee.Password" />
        </div>

        @if (!string.IsNullOrEmpty(errorLabel))
        {
        <div class="alert">@errorLabel</div>
        }

        <button type="submit">Register</button>
    </EditForm>
</div>

@code {
    private NewEmployeeDTO newEmployee = new NewEmployeeDTO();
    private string errorLabel;
    private string workingNumberStr;

    private async Task HandleValidSubmit()
    {
        
        
        if (!int.TryParse(workingNumberStr, out var workingNumber))
        {
            errorLabel = "Working Number must be a whole number.";
            return;
        }
        newEmployee.WorkingNumber = workingNumber;
        
        
        
        if (string.IsNullOrEmpty(newEmployee.FirstName) || string.IsNullOrEmpty(newEmployee.LastName) || newEmployee.WorkingNumber == 0 || string.IsNullOrEmpty(newEmployee.Email) || string.IsNullOrEmpty(newEmployee.Password))
        {
            errorLabel = "Please fill out all fields in the form.";
            return;
        }
        
        try
        {

            await ((SimpleAuthProvider)AuthProvider).Register(newEmployee.FirstName, newEmployee.LastName, newEmployee.WorkingNumber, newEmployee.Email, newEmployee.Password);
            navMgr.NavigateTo("Login");
        }
        catch (Exception e)
        {

            errorLabel = $"Error: {e.Message}";
        }
    }
}