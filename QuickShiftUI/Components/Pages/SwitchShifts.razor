@page "/SwitchShifts"

@using DTOs.Shift
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using QuickShiftUI.Services
@rendermode InteractiveServer
@inject IShiftService ShiftService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider


<h3>Switch Shifts</h3>


<AuthorizeView>

    <NotAuthorized></NotAuthorized>

    <Authorized Context="authorizedUser">

        @* Accept a switch - invisible until final confirmation on switch needed *@

        <div class="mt-4">
            <h4>Pending switch</h4>
            <div class="mt-4">
                @* links to switch request *@

            </div>
        </div>

        @* Offer a shift to swhitch *@

        <div class="mt-4">
            <h4 class="mt-4">Make a switch offer from your shift</h4>
            <div class="mt-4">
                @* pending requests that have not been actepted by other employee yet *@
                <div></div>
            </div>

            <div class="mt-4">
                @* Pick a shift to offer for switch *@
                
                    @if (myShifts == null)
                    {
                        <p class="mt-4">
                            <em>Loading...</em>
                        </p>
                    }
                    else if (!myShifts.Any())
                    {
                        <p class="mt-4">No shifts available.</p>
                    }
                    else
                    {
                        <ul class="list-group mt-4">
                            @foreach (var ShiftDTO in myShifts)
                            {
                                <li class="list-group-item">
                                    <a href="#" @onclick="() => RedirectToShift(ShiftDTO.Id)" @onclick:preventDefault="true">@ShiftDTO.TypeOfShift</a>
                                    <button style="float:right">Select</button>
                                    <span style=" float:right">@ShiftDTO.EndDateTime </span>
                                    <span style="float:right">@ShiftDTO.StartDateTime - </span>
                                </li>
                            }
                        </ul>
                    }

            </div>

            <div>
                @* pick a timeframe for a shift to sitch for *@

            </div>
            
        </div>

        @* See offers of other employees *@

        <div class="mt-4">
            <h4 class="mt-4">Shift switch offers</h4>

            @* list of offers (shift + timeframe of re) *@
            <div class="mt-4"></div>

            @* list of your shifts in the timeframe of selected shift *@
            <div class="mt-4"></div>

        </div>

        @* See shifts of other employees and request shift switch for a specific shift *@

        <div class="mt-4">
            <h4 class="mt-4">Request shift switch</h4>
            <div class="mt-4">
                @* calendar time range picker *@


            </div>

            <div class="mt-4">
                @* list of other employees shifts in that timeframe *@
                @if (allShifts == null)
                {
                <p class="mt-4">
                    <em>Loading...</em>
                </p>
                }
                else if (!allShifts.Any())
                {
                <p class="mt-4">No shifts available.</p>
                }
                else
                {
                <ul class="list-group mt-4">
                    @foreach (var ShiftDTO in allShifts)
                    {
                    <li class="list-group-item">
                        <a href="#" @onclick="() => RedirectToShift(ShiftDTO.Id)" @onclick:preventDefault="true">@ShiftDTO.TypeOfShift</a>
                        <button @onclick="() => RedirectToRequest(ShiftDTO.Id)" style="float:right">Select</button>
                        <span style=" float:right">@ShiftDTO.EndDateTime</span>
                        <span style="float:right">@ShiftDTO.StartDateTime - </span>
                    </li>
                    }
                </ul>
                }
            </div>

        </div>

        @* See open shifts - no employee assigned *@

        <div class="mt-4">
            <h4 class="mt-4">Open shifts</h4>
            <div>
                @* list of shifts here *@
            </div>
        </div>

        @*  *@

    </Authorized>

</AuthorizeView>

@code {
    private List<ShiftDTO> myShifts;
    private List<ShiftDTO> allShifts;
    
    private void RedirectToShift(long Id)
    {
        Console.WriteLine(Id);
        Navigation.NavigateTo($"/MyShifts/{Id}");
    }
    
    private void RedirectToRequest(long Id)
    {
        Navigation.NavigateTo($"/SwitchRequest/{Id}");
    }

    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    private int loggedInUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst(c => c.Type == "EmployeeId")?.Value;
            if (int.TryParse(userIdClaim, out int userId))
            {
                loggedInUserId = userId;
                myShifts = (await ShiftService.GetAllShiftsByUserIdAsync(userId)).ToList();
                allShifts = (await ShiftService.GetAllShiftsAsync()).ToList();
                Console.WriteLine(myShifts.Any());
                Console.WriteLine(userId);
                StateHasChanged();
            }
        }
    }

}