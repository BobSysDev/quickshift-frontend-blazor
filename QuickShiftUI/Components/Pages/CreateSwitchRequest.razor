@page "/CreateSwitchRequest"
@using System.Security.Claims
@using System.Text.Json
@using DTOs
@using DTOs.Shift
@using DTOs.ShiftSwitching
@using QuickShiftUI.Services
@inject IShiftService ShiftService
@inject IShiftSwitchRequestService RequestService
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@using System.Text.Json;
@using Microsoft.JSInterop;


<div class="card mt-4">
    <div class="card-header">
        <h3>Create Switch Request</h3>
    </div>
    <div class="card-body">
        <EditForm Model="newShiftSwitchRequest" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <h4>Pick a shift for switch</h4>

            @if (shifts == null)
            {
                <p class="mt-4">
                    <em>Loading...</em>
                </p>
            }
            else if (!shifts.Any())
            {
                <p class="mt-4">No shifts available.</p>
            }
            else
            {
                <InputSelect @bind-Value=newShiftSwitchRequest.OriginShiftId class="list-group mt-4">
                    @foreach (var ShiftDTO in shifts)
                    {
                        <option value="@ShiftDTO.Id">@ShiftDTO.TypeOfShift</option>
                    }
                </InputSelect>
            }


            <h4>Select timeframe</h4>

            <div class="form-group">
                <label for="start-date">Start date of timeframe:</label>
                <InputDate ParsingErrorMessage="Must be a date" id="start-date" class="form-control"
                           @bind-Value="newShiftSwitchRequestTimeframeDTO.StartDate"/>
            </div>

            <div class="form-group">
                <label for="end-date">End date of timeframe:</label>
                <InputDate ParsingErrorMessage="Must be a date" id="end-date" class="form-control"
                           @bind-Value="newShiftSwitchRequestTimeframeDTO.EndDate"/>
            </div>


            <h4>Request details</h4>

            <div class="form-group">
                <label for="details">Details:</label>
                <InputTextArea id="details" class="form-control" @bind-Value="newShiftSwitchRequest.Details"/>
            </div>

            @if (!string.IsNullOrEmpty(errorLabel))
            {
                <div class="alert">@errorLabel</div>
            }

            <button type="submit">Create request</button>

        </EditForm>
    </div>
</div>


@code {
    private NewShiftSwitchRequestDTO newShiftSwitchRequest = new NewShiftSwitchRequestDTO();
    private NewShiftSwitchRequestTimeframeDTO newShiftSwitchRequestTimeframeDTO = new NewShiftSwitchRequestTimeframeDTO()
    {
        StartDate = DateTime.Today,
        EndDate = DateTime.Today.AddDays(7)
    };
    private List<ShiftDTO> shifts;

    private readonly HttpClient httpClient;
    private readonly IJSRuntime jsRuntime;
    private string errorLabel;

    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    private int loggedInUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst(c => c.Type == "EmployeeId")?.Value;
            if (int.TryParse(userIdClaim, out int userId))
            {
                loggedInUserId = userId;
                shifts = (await ShiftService.GetAllShiftsByUserIdAsync(userId)).ToList();
                StateHasChanged();
            }
        }
    }

    private async Task CreateRequest(long originEmployeeId, long originShiftId, string details, List<ShiftSwitchRequestTimeframeDTO>? timeframeDtos)
    {
        var newShiftSwitchRequest = new NewShiftSwitchRequestDTO()
        {
            OriginEmployeeId = originEmployeeId,
            OriginShiftId = originShiftId,
            Details = details,
            TimeframeDtos = timeframeDtos
        };
        HttpResponseMessage response = await httpClient.PostAsJsonAsync("/Auth/register", newShiftSwitchRequest);
        string content = await response.Content.ReadAsStringAsync();
        if (!response.IsSuccessStatusCode)
        {
            throw new Exception(content);
        }

        ShiftSwitchRequestDTO shiftSwitchRequestDTO = JsonSerializer.Deserialize<ShiftSwitchRequestDTO>(content, new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        });
        if (shiftSwitchRequestDTO is null)
        {
            throw new Exception("DTO returned was null");
        }

        string serializedData = JsonSerializer.Serialize(shiftSwitchRequestDTO);
        await jsRuntime.InvokeVoidAsync("sessionStorage.setItem", "currentUser", serializedData);
        
    } /* TODO make it actually create request */


    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(newShiftSwitchRequest.Details) || newShiftSwitchRequest.OriginShiftId == 0)
        {
            errorLabel = "Please fill out the form.";
            return;
        }

        try
        {
            await CreateRequest(newShiftSwitchRequest.OriginEmployeeId, newShiftSwitchRequest.OriginShiftId, newShiftSwitchRequest.Details, newShiftSwitchRequest.TimeframeDtos);
            Navigation.NavigateTo("/MyRequests");
        }
        catch (Exception e)
        {
            errorLabel = $"Error: {e.Message}";
        }
    }

}